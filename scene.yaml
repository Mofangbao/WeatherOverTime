# Author: Paitricio Gonzalez Vivo @patricio 2016

sources:
    osm:
        type: TopoJSON
        url:  https://vector.mapzen.com/osm/all/{z}/{x}/{y}.topojson?api_key=vector-tiles-Nhm6Mkg
    stations:
        type: GeoJSON
        url:  data/stations.geojson
cameras:
    perspective:
        type: perspective
layers:
    earth:
        data: { source: osm }
        draw:
            polygons:
                order: 1
                color: [0.293, 0.300, 0.297]
    water:
        data: { source: osm }
        draw:
            polygons:
                order: 2
                color: [0.688, 0.695, 0.695]
    landuse:
        data: { source: osm }
        draw:
            area:
                order: 3
                color: [0.443, 0.434, 0.434]
    roads:
        data: { source: osm, layer: roads }
        filter: { $zoom: {min: 7}, not: { highway: service, kind: rail } }
        draw:
            lines:
                order: 7
                color: [.7,.7,.7]
                width: [[6,0px], [7,.25px], [10, .5px], [15, .75px], [17, 5m]]
        highway:
            filter: { kind: highway }
            draw:
                lines:
                    order: 8
                    color: [.8,.8,.8]#[1.000,0.897,0.058]
                    width: [[1,0px], [6,.25px], [11, 2px], [14, 3px], [16, 4px], [17, 10m]]
            link:
                filter: { is_link: yes } # on- and off-ramps, etc
                draw:
                    lines:
                        color: [.7,.7,.7]#[1.000,0.933,0.710]
                        width: [[10,0px], [14, 3px], [16, 5px], [18, 10m]]
                tunnel-link:
                    filter: {is_tunnel: yes, $zoom: {min: 13} }
                    draw:
                        lines:
                            color: [.5,.5,.5]#[0.805,0.748,0.557]
            tunnel:
                filter: {is_tunnel: yes, $zoom: {min: 13} }
                draw:
                    lines:
                        order: 5
                        color: [.5,.5,.5]#[0.805,0.748,0.557]
        major_road:
            filter: { kind: major_road }
            draw:
                lines:
                    color: [[13, [.6,.6,.6]], [17, white]]
                    width: [[1,0px], [6,.5px], [11,1px], [14, 2px], [16, 2.5px], [19, 8m]]
                    primary:
                        filter: { highway: primary }
                        draw:
                            lines:
                                width: [[1,0px], [6,.5px], [11,1px], [11, 1.5px], [13, 2.5px], [16, 2.5px], [19, 8m]]
                    secondary:
                        filter: { highway: secondary }
                        draw:
                            lines:
                                width: [[1,0px], [6,.5px], [11,1px], [13, 1.5px], [14, 2.5px], [16, 2.5px], [19, 8m]]
                    tertiary:
                        filter: { highway: tertiary }
                        draw:
                            lines:
                                width: [[1,0px], [6,.5px], [11,1px], [13, .75px], [14, 2.5px], [16, 2.5px], [19, 8m]]
        path:
            filter: { kind: path }
            draw:
                lines:
                    color: [0.8, 0.8, 0.8]
                    width: [[14,.1px],[16,.5px], [17, 2m]]
    station:
        data: { source: stations }
        properties: 
            hovered: -1
        draw:
            wind:
                interactive: true
                # collide: false
                blend: overlay
                blend_order: 1
                size: 50
                color: |
                    function() {
                        var hovered = feature.id === properties.hovered ? 1 : 0;
                        return [ ( Math.floor(feature.id/255))/255, (feature.id%255)/255, hovered ]; 
                    }
styles:
    functions-aastep:
        shaders:
            extensions: OES_standard_derivatives
            blocks:
                global: |
                    // AntiAliased Step function
                    //=============================
                    float aastep(float threshold, float value) {
                        #ifdef TANGRAM_FRAGMENT_SHADER
                            #ifdef TANGRAM_EXTENSION_OES_standard_derivatives
                                float afwidth = length(vec2(dFdx(value), dFdy(value))) * 0.70710678118654757;
                                return smoothstep(threshold-afwidth, threshold+afwidth, value);
                            #else
                                return step(threshold, value);
                            #endif  
                        #else
                            return step(threshold, value);
                        #endif
                    }

                    vec2 aastep(vec2 threshold, vec2 value) {
                        return vec2(aastep(threshold.x, value.x),
                                    aastep(threshold.y, value.y));
                    }
    functions-map:
        shaders:
            defines:
                EPSILON: 0.0000001
            blocks:
                global: |
                    float map (in float value, in float inputMin, in float inputMax, in float outputMin, in float outputMax, bool clamp) {
                        if (abs(inputMin - inputMax) < EPSILON){
                            return outputMin;
                        } else {
                            float outVal = ((value - inputMin) / (inputMax - inputMin) * (outputMax - outputMin) + outputMin);
                        
                            if( clamp ){
                                if(outputMax < outputMin){
                                    if( outVal < outputMax ) outVal = outputMax;
                                    else if( outVal > outputMin ) outVal = outputMin;
                                }else{
                                    if( outVal > outputMax ) outVal = outputMax;
                                    else if( outVal < outputMin ) outVal = outputMin;
                                }
                            }
                            return outVal;
                        }
                    }
                    float map (in float value, in float inputMin, in float inputMax, in float outputMin, in float outputMax) {
                        return map(value, inputMin, inputMax, outputMin, outputMax, true); 
                    }
    geometry-matrices:
        shaders:
            defines:
                PI: 3.141592653589793
                TWO_PI: 6.28318530718
            blocks:
                global: |
                    mat2 rotate2D (float angle) {
                        return mat2(cos(angle),-sin(angle),
                                    sin(angle),cos(angle));
                    }
    space-tile:
        shaders:
            blocks:
                global: |
                    // Variant to be add to both vertex and fragments shaders
                    varying vec3 v_pos;
                    //
                    // Get the coordinates in tile space
                    // ================================
                    vec2 getTileCoords() {
                        return fract(v_pos.xy);
                    }

                position: |
                    // Normalize the attribute position of a vertex
                    v_pos = modelPosition().xyz;
    shapes-rect:
        shaders:
            blocks:
                global: |
                    // get distance field of a rectangle in the center
                    // ================================
                    float rectDF(vec2 st, vec2 size) {
                        //float aspect = u_resolution.x/u_resolution.y;
                        st = st*2.-1.;
                        //st.x *= aspect;
                        return length(max(abs(st)-size,.0));
                    }
                    float rectDF(vec2 st, float size) {
                        //float aspect = u_resolution.x/u_resolution.y;
                        st = st*2.-1.;
                        //st.x *= aspect;
                        return length(max(abs(st)-size,.0));
                    }
                    
                    // Draw a round corners rectangle in the center
                    // ================================
                    float rect(vec2 st, vec2 size, float radio) {
                        radio = max(.000001, radio);
                        return 1.0-step(radio, rectDF(st, size-radio));
                    }
                    
                    float rect(vec2 st, float size, float radio) {
                        return rect(st,vec2(size),radio);
                    }
                    
                    // Draw a rectangle in the center
                    // ================================
                    float rect(vec2 st, vec2 size){
                        size = .25-size*.125;
                        vec2 uv = step(size,st*(1.0-st));
                        return (uv.x*uv.y);
                    }
                    
                    float rect(vec2 st, float size){
                        return rect(st,vec2(size));
                    }
    shapes-cross:
        mix: shapes-rect
        shaders:
            blocks:
                global: |
                    // Draw a Cross in the middle of the ST space
                    float cross (vec2 st, float size, float width) {
                        return  clamp(  rect(st, vec2(size*0.5,width*0.125)) +
                                        rect(st, vec2(width*0.125,size*0.5)),0.,1.);
                    }
    shapes-digits:
        shaders:
            blocks:
                global: |
                    const float kCharBlank = 12.0;
                    const float kCharMinus = 11.0;
                    const float kCharDecimalPoint = 10.0;

                    // https://www.shadertoy.com/view/4sf3RN
                    float SampleDigit(const in float fDigit, const in vec2 vUV) {       
                        if(vUV.x < 0.0) return 0.0;
                        if(vUV.y < 0.0) return 0.0;
                        if(vUV.x >= 1.0) return 0.0;
                        if(vUV.y >= 1.0) return 0.0;
                        
                        // In this version, each digit is made up of a 4x5 array of bits
                        float fDigitBinary = 0.0;
                        
                        if(fDigit < 0.5) { // 0
                            fDigitBinary = 7.0 + 5.0 * 16.0 + 5.0 * 256.0 + 5.0 * 4096.0 + 7.0 * 65536.0;
                        } else if(fDigit < 1.5) { // 1
                            fDigitBinary = 2.0 + 2.0 * 16.0 + 2.0 * 256.0 + 2.0 * 4096.0 + 2.0 * 65536.0;
                        } else if(fDigit < 2.5) { // 2
                            fDigitBinary = 7.0 + 1.0 * 16.0 + 7.0 * 256.0 + 4.0 * 4096.0 + 7.0 * 65536.0;
                        } else if(fDigit < 3.5) { // 3
                            fDigitBinary = 7.0 + 4.0 * 16.0 + 7.0 * 256.0 + 4.0 * 4096.0 + 7.0 * 65536.0;
                        } else if(fDigit < 4.5) { // 4
                            fDigitBinary = 4.0 + 7.0 * 16.0 + 5.0 * 256.0 + 1.0 * 4096.0 + 1.0 * 65536.0;
                        } else if(fDigit < 5.5) { // 5
                            fDigitBinary = 7.0 + 4.0 * 16.0 + 7.0 * 256.0 + 1.0 * 4096.0 + 7.0 * 65536.0;
                        } else if(fDigit < 6.5) { // 6
                            fDigitBinary = 7.0 + 5.0 * 16.0 + 7.0 * 256.0 + 1.0 * 4096.0 + 7.0 * 65536.0;
                        } else if(fDigit < 7.5) { // 7
                            fDigitBinary = 4.0 + 4.0 * 16.0 + 4.0 * 256.0 + 4.0 * 4096.0 + 7.0 * 65536.0;
                        } else if(fDigit < 8.5) { // 8
                            fDigitBinary = 7.0 + 5.0 * 16.0 + 7.0 * 256.0 + 5.0 * 4096.0 + 7.0 * 65536.0;
                        } else if(fDigit < 9.5) { // 9
                            fDigitBinary = 7.0 + 4.0 * 16.0 + 7.0 * 256.0 + 5.0 * 4096.0 + 7.0 * 65536.0;
                        } else if(fDigit < 10.5) { // '.'
                            fDigitBinary = 2.0 + 0.0 * 16.0 + 0.0 * 256.0 + 0.0 * 4096.0 + 0.0 * 65536.0;
                        } else if(fDigit < 11.5) { // '-'
                            fDigitBinary = 0.0 + 0.0 * 16.0 + 7.0 * 256.0 + 0.0 * 4096.0 + 0.0 * 65536.0;
                        }

                        vec2 vPixel = floor(vUV * vec2(4.0, 5.0));
                        float fIndex = vPixel.x + (vPixel.y * 4.0);
                        return mod(floor(fDigitBinary / pow(2.0, fIndex)), 2.0);
                    }

                    float PrintValue(const in vec2 vStringCharCoords, const in float fValue, const in float fMaxDigits, const in float fDecimalPlaces) {
                        float fAbsValue = abs(fValue);
                        float fStringCharIndex = floor(vStringCharCoords.x);
                        float fLog10Value = log2(fAbsValue) / log2(10.0);
                        float fBiggestDigitIndex = max(floor(fLog10Value), 0.0);
                        
                        // This is the character we are going to display for this pixel
                        float fDigitCharacter = kCharBlank;
                        float fDigitIndex = fMaxDigits - fStringCharIndex;
                        if(fDigitIndex > (-fDecimalPlaces - 1.5)) {
                            if(fDigitIndex > fBiggestDigitIndex) {
                                if(fValue < 0.0) {
                                    if(fDigitIndex < (fBiggestDigitIndex+1.5)) {
                                        fDigitCharacter = kCharMinus;
                                    }
                                }
                            } else {        
                                if(fDigitIndex == -1.0) {
                                    if(fDecimalPlaces > 0.0) {
                                        fDigitCharacter = kCharDecimalPoint;
                                    }
                                } else {
                                    if(fDigitIndex < 0.0) {
                                        // move along one to account for .
                                        fDigitIndex += 1.0;
                                    }
                                    float fDigitValue = (fAbsValue / (pow(10.0, fDigitIndex)));

                                    // This is inaccurate - I think because I treat each digit independently
                                    // The value 2.0 gets printed as 2.09 :/
                                    //fDigitCharacter = mod(floor(fDigitValue), 10.0);
                                    fDigitCharacter = mod(floor(0.0001+fDigitValue), 10.0); // fix from iq
                                }       
                            }
                        }

                        vec2 vCharPos = vec2(fract(vStringCharCoords.x), vStringCharCoords.y);
                        return SampleDigit(fDigitCharacter, vCharPos);  
                    }

                    float PrintValue(in vec2 fragCoord, const in vec2 vPixelCoords, const in vec2 vFontSize, const in float fValue, const in float fMaxDigits, const in float fDecimalPlaces){
                        return PrintValue((fragCoord.xy - vPixelCoords) / vFontSize, fValue, fMaxDigits, fDecimalPlaces);
                    }
    area:
        base: polygons
        mix: [geometry-matrices, functions-map, functions-aastep, space-tile]
        blend: inlay
        shaders: 
            blocks: 
                global: |
                    float stripes(vec2 st, float width){
                        st = rotate2D(0.78539816339)*st;
                        st *= 29.7;
                        return aastep(.5+width*0.5,abs(sin(st.y*3.14159265358)));
                    }
                filter: |
                    vec2 st = getTileCoords();
                    float pct = pow(1.-map(u_map_position.z,6.,20.,0.,1.),5.0);
                    color.a = stripes(st,pct*1.4)*.5;
    wind:
        base: points
        texcoords: true
        animated: true
        mix: [functions-aastep, geometry-matrices, shapes-cross, shapes-digits]
        shaders:
            uniforms:
                u_data: data/data.png
                u_param: [0,0]
                u_offset: 0
            blocks: 
                global: |
                    float getIndex (vec2 encodedIndex) {
                        return (encodedIndex.x*65025.+encodedIndex.y*255.)+.5;
                    }
                    
                    float shape(vec2 st, int N){
                        st = st *2.-1.;
                        float a = atan(st.x,st.y)+PI;
                        float r = TWO_PI/float(N);
                        return cos(floor(.5+a/r)*r-a)*length(st);
                    }

                    vec4 getColor (vec2 st) {
                        float texWidth = u_param.x;
                        float texHeigth = u_param.y;
                        st.y = 1.-st.y/texHeigth;
                        return texture2D(u_data,vec2(st.x/texWidth,st.y));
                    }

                color: |
                    float index = getIndex(color.st);
                    color = getColor(vec2(mod(u_offset,u_param.x), index));

                    float hover = v_color.b;
                    float valid = step(0.9,v_color.a);
                    float temp = (color.r-.5)*2.;
                    float w_speed = color.g;
                    float w_deg = color.b*PI;

                    vec2 st = v_texcoord.xy;
                    st -= .5;
                    st = rotate2D(w_deg)* st;
                    st *= 0.716;
                    st += .5;

                    // Arrow
                    float scale = (1.-w_speed)*1.;
                    float d = shape(st*vec2(scale+.5,.5)+vec2(scale*-.5+.25,.3),3);
                    color.rgb = mix(vec3(0.,0.,1.),vec3(1.,0.,0.),sin(temp*3.14)*.5+.5);
                    color.a *= 1.0-step(.2,d)*valid;

                    // Hud
                    float hud = 0.;
                    hud += max(rect(v_texcoord.xy,2.)-rect(v_texcoord.xy,1.6)-cross(v_texcoord.xy,5.,5.),0.)*hover;

                    vec2 vFontSize = vec2(4.0, 5.0);
                    hud += PrintValue(v_texcoord.xy*vec2(35.), vec2(4.,4.), vFontSize, temp*255., 2., 1.);

                    vec2 offset = v_texcoord.xy-vec2(0.240,-0.280);
                    hud += rect(offset,.01)-rect(offset,.001);

                    color += hud*valid;
