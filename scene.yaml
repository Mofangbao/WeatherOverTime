# Author: Paitricio Gonzalez Vivo @patricio 2016

sources:
    osm:
        type: TopoJSON
        url:  https://vector.mapzen.com/osm/all/{z}/{x}/{y}.topojson?api_key=vector-tiles-Nhm6Mkg
        rasters: [elevation]
    stations:
        type: GeoJSON
        url:  data/stations.geojson
    elevation:
        type: Raster
        url: http://c.tile.stamen.com/terrain-background/{z}/{x}/{y}.jpg
textures:
    data_image:
        url: data/data.png
        filtering: nearest

global:
    hovered: -1

cameras:
    perspective:
        type: perspective
scene:
    background: 
        color: [0.933,0.937,0.949]
layers:
    earth:
        data: { source: osm }
        draw:
            elevation:
                order: function() { return feature.sort_key; }
                color: [0.933,0.937,0.949]
            lines:
                order: 11
                color: [0.270, 0.270, 0.270]
                width: 2px
    water:
        data: { source: osm }
        draw:
            water:
                order: function() { return feature.sort_key; }
                color: [0.933,0.937,0.949]
    landuse:
        data: { source: osm }
        draw:
            area:
                order: function() { return feature.sort_key; }
                color: [0.933,0.937,0.949]
    boundaries:
        data: { source: osm }
        filter: { $zoom: {max: 9}}
        draw:
            lines:
                order: function() { return feature.sort_key; }
                color: [0.480, 0.480, 0.480]
                width: [[8,1px],[9,0px]]
    roads:
        data: { source: osm, layer: roads }
        filter: { $zoom: {min: 7}, not: { kind: [rail, ferry] } }
        draw:
            lines:
                order: function() { return feature.sort_key; }
                color: [0.224, 0.258, 0.260]
                width: [[7,0.0px], [10, .5px], [15, .75px], [17, 5m]]
        highway:
            filter: { kind: highway }
            draw:
                lines:
                    order: function() { return feature.sort_key; }
                    color: [0.680, 0.244, 0.432]
                    width: [[8,0px], [8,.25px], [11, 1.5px], [14, 2px], [16, 4px], [17, 10m]]
            link:
                filter: { is_link: yes } # on- and off-ramps, etc
                draw:
                    lines:
                        color: [0.625, 0.534, 0.650]
                        width: [[8,0px], [14, 3px], [16, 5px], [18, 10m]]
                tunnel-link:
                    filter: {is_tunnel: yes, $zoom: {min: 13} }
                    draw:
                        lines:
                            color: [0.370, 0.031, 0.186]
        tunnel:
            filter: {is_tunnel: yes }
            draw:
                lines:
                    order: function() { return feature.sort_key; }
                    color: [0.286, 0.322, 0.325]
    station:
        data: { source: stations }            
        draw:
            wind:
                interactive: true
                collide: false
                blend: overlay
                blend_order: 1
                size: 40
                color: |
                    function() {
                        var hovered = feature.id === global.hovered ? 1 : 0;
                        return [ ( Math.floor(feature.id/255))/255, (feature.id%255)/255, hovered ]; 
                    }
        label:
            filter: { $zoom: { min: 9 } }
            draw:
                text:
                    blend_order: 0
                    offset: [0,-60px]
                    font:
                        family: Helvetica
                        size: 14px
                        weight: 100
                        fill: white
                        stroke: { color: [0.055, 0.055, 0.055], width: 5 }
styles:
    functions-aastep:
        shaders:
            extensions: OES_standard_derivatives
            blocks:
                global: |
                    // AntiAliased Step function
                    //=============================
                    float aastep(float threshold, float value) {
                        #ifdef TANGRAM_FRAGMENT_SHADER
                            #ifdef TANGRAM_EXTENSION_OES_standard_derivatives
                                float afwidth = length(vec2(dFdx(value), dFdy(value))) * 0.70710678118654757;
                                return smoothstep(threshold-afwidth, threshold+afwidth, value);
                            #else
                                return step(threshold, value);
                            #endif  
                        #else
                            return step(threshold, value);
                        #endif
                    }

                    vec2 aastep(vec2 threshold, vec2 value) {
                        return vec2(aastep(threshold.x, value.x),
                                    aastep(threshold.y, value.y));
                    }
    functions-map:
        shaders:
            defines:
                EPSILON: 0.0000001
            blocks:
                global: |
                    float map (in float value, in float inputMin, in float inputMax, in float outputMin, in float outputMax, bool clamp) {
                        if (abs(inputMin - inputMax) < EPSILON){
                            return outputMin;
                        } else {
                            float outVal = ((value - inputMin) / (inputMax - inputMin) * (outputMax - outputMin) + outputMin);
                        
                            if( clamp ){
                                if(outputMax < outputMin){
                                    if( outVal < outputMax ) outVal = outputMax;
                                    else if( outVal > outputMin ) outVal = outputMin;
                                }else{
                                    if( outVal > outputMax ) outVal = outputMax;
                                    else if( outVal < outputMin ) outVal = outputMin;
                                }
                            }
                            return outVal;
                        }
                    }
                    float map (in float value, in float inputMin, in float inputMax, in float outputMin, in float outputMax) {
                        return map(value, inputMin, inputMax, outputMin, outputMax, true); 
                    }
    color-tools:
        shaders:
            blocks:
                global: |
                    // Get the intensity of a color
                    // ================================
                    float getIntensity (vec3 c) {
                        return (c.r+c.g+c.b)/3.0;
                    }
                    float getIntensity (vec4 c) {
                        return getIntensity(c.rgb);
                    }
                    //
                    // Get the Brightness of a color
                    // ================================
                    float getBrightness (vec3 c) {
                        return 0.212655 * c.r + 0.715158 * c.g + 0.072187 * c.b;
                    }
                    float getBrightness (vec4 c) {
                        return getBrightness(c.rgb);
                    }
    geometry-matrices:
        shaders:
            defines:
                PI: 3.141592653589793
                TWO_PI: 6.28318530718
            blocks:
                global: |
                    mat2 rotate2D (float angle) {
                        return mat2(cos(angle),-sin(angle),
                                    sin(angle),cos(angle));
                    }
    space-tile:
        shaders:
            blocks:
                global: |
                    // Variant to be add to both vertex and fragments shaders
                    varying vec3 v_pos;
                    //
                    // Get the coordinates in tile space
                    // ================================
                    vec2 getTileCoords() {
                        return fract(v_pos.xy);
                    }

                position: |
                    // Normalize the attribute position of a vertex
                    v_pos = modelPosition().xyz;
    shapes-rect:
        shaders:
            blocks:
                global: |
                    // get distance field of a rectangle in the center
                    // ================================
                    float rectDF(vec2 st, vec2 size) {
                        //float aspect = u_resolution.x/u_resolution.y;
                        st = st*2.-1.;
                        //st.x *= aspect;
                        return length(max(abs(st)-size,.0));
                    }
                    float rectDF(vec2 st, float size) {
                        //float aspect = u_resolution.x/u_resolution.y;
                        st = st*2.-1.;
                        //st.x *= aspect;
                        return length(max(abs(st)-size,.0));
                    }
                    
                    // Draw a round corners rectangle in the center
                    // ================================
                    float rect(vec2 st, vec2 size, float radio) {
                        radio = max(.000001, radio);
                        return 1.0-step(radio, rectDF(st, size-radio));
                    }
                    
                    float rect(vec2 st, float size, float radio) {
                        return rect(st,vec2(size),radio);
                    }
                    
                    // Draw a rectangle in the center
                    // ================================
                    float rect(vec2 st, vec2 size){
                        size = .25-size*.125;
                        vec2 uv = step(size,st*(1.0-st));
                        return (uv.x*uv.y);
                    }
                    
                    float rect(vec2 st, float size){
                        return rect(st,vec2(size));
                    }
    shapes-cross:
        mix: shapes-rect
        shaders:
            blocks:
                global: |
                    // Draw a Cross in the middle of the ST space
                    float cross (vec2 st, float size, float width) {
                        return  clamp(  rect(st, vec2(size*0.5,width*0.125)) +
                                        rect(st, vec2(width*0.125,size*0.5)),0.,1.);
                    }
    shapes-digits:
        shaders:
            blocks:
                global: |
                    const float kCharBlank = 12.0;
                    const float kCharMinus = 11.0;
                    const float kCharDecimalPoint = 10.0;

                    // https://www.shadertoy.com/view/4sf3RN
                    float SampleDigit(const in float fDigit, const in vec2 vUV) {       
                        if(vUV.x < 0.0) return 0.0;
                        if(vUV.y < 0.0) return 0.0;
                        if(vUV.x >= 1.0) return 0.0;
                        if(vUV.y >= 1.0) return 0.0;
                        
                        // In this version, each digit is made up of a 4x5 array of bits
                        float fDigitBinary = 0.0;
                        
                        if(fDigit < 0.5) { // 0
                            fDigitBinary = 7.0 + 5.0 * 16.0 + 5.0 * 256.0 + 5.0 * 4096.0 + 7.0 * 65536.0;
                        } else if(fDigit < 1.5) { // 1
                            fDigitBinary = 2.0 + 2.0 * 16.0 + 2.0 * 256.0 + 2.0 * 4096.0 + 2.0 * 65536.0;
                        } else if(fDigit < 2.5) { // 2
                            fDigitBinary = 7.0 + 1.0 * 16.0 + 7.0 * 256.0 + 4.0 * 4096.0 + 7.0 * 65536.0;
                        } else if(fDigit < 3.5) { // 3
                            fDigitBinary = 7.0 + 4.0 * 16.0 + 7.0 * 256.0 + 4.0 * 4096.0 + 7.0 * 65536.0;
                        } else if(fDigit < 4.5) { // 4
                            fDigitBinary = 4.0 + 7.0 * 16.0 + 5.0 * 256.0 + 1.0 * 4096.0 + 1.0 * 65536.0;
                        } else if(fDigit < 5.5) { // 5
                            fDigitBinary = 7.0 + 4.0 * 16.0 + 7.0 * 256.0 + 1.0 * 4096.0 + 7.0 * 65536.0;
                        } else if(fDigit < 6.5) { // 6
                            fDigitBinary = 7.0 + 5.0 * 16.0 + 7.0 * 256.0 + 1.0 * 4096.0 + 7.0 * 65536.0;
                        } else if(fDigit < 7.5) { // 7
                            fDigitBinary = 4.0 + 4.0 * 16.0 + 4.0 * 256.0 + 4.0 * 4096.0 + 7.0 * 65536.0;
                        } else if(fDigit < 8.5) { // 8
                            fDigitBinary = 7.0 + 5.0 * 16.0 + 7.0 * 256.0 + 5.0 * 4096.0 + 7.0 * 65536.0;
                        } else if(fDigit < 9.5) { // 9
                            fDigitBinary = 7.0 + 4.0 * 16.0 + 7.0 * 256.0 + 5.0 * 4096.0 + 7.0 * 65536.0;
                        } else if(fDigit < 10.5) { // '.'
                            fDigitBinary = 2.0 + 0.0 * 16.0 + 0.0 * 256.0 + 0.0 * 4096.0 + 0.0 * 65536.0;
                        } else if(fDigit < 11.5) { // '-'
                            fDigitBinary = 0.0 + 0.0 * 16.0 + 7.0 * 256.0 + 0.0 * 4096.0 + 0.0 * 65536.0;
                        }

                        vec2 vPixel = floor(vUV * vec2(4.0, 5.0));
                        float fIndex = vPixel.x + (vPixel.y * 4.0);
                        return mod(floor(fDigitBinary / pow(2.0, fIndex)), 2.0);
                    }

                    float PrintValue(const in vec2 vStringCharCoords, const in float fValue, const in float fMaxDigits, const in float fDecimalPlaces) {
                        float fAbsValue = abs(fValue);
                        float fStringCharIndex = floor(vStringCharCoords.x);
                        float fLog10Value = log2(fAbsValue) / log2(10.0);
                        float fBiggestDigitIndex = max(floor(fLog10Value), 0.0);
                        
                        // This is the character we are going to display for this pixel
                        float fDigitCharacter = kCharBlank;
                        float fDigitIndex = fMaxDigits - fStringCharIndex;
                        if(fDigitIndex > (-fDecimalPlaces - 1.5)) {
                            if(fDigitIndex > fBiggestDigitIndex) {
                                if(fValue < 0.0) {
                                    if(fDigitIndex < (fBiggestDigitIndex+1.5)) {
                                        fDigitCharacter = kCharMinus;
                                    }
                                }
                            } else {        
                                if(fDigitIndex == -1.0) {
                                    if(fDecimalPlaces > 0.0) {
                                        fDigitCharacter = kCharDecimalPoint;
                                    }
                                } else {
                                    if(fDigitIndex < 0.0) {
                                        // move along one to account for .
                                        fDigitIndex += 1.0;
                                    }
                                    float fDigitValue = (fAbsValue / (pow(10.0, fDigitIndex)));

                                    // This is inaccurate - I think because I treat each digit independently
                                    // The value 2.0 gets printed as 2.09 :/
                                    //fDigitCharacter = mod(floor(fDigitValue), 10.0);
                                    fDigitCharacter = mod(floor(0.0001+fDigitValue), 10.0); // fix from iq
                                }       
                            }
                        }

                        vec2 vCharPos = vec2(fract(vStringCharCoords.x), vStringCharCoords.y);
                        return SampleDigit(fDigitCharacter, vCharPos);  
                    }

                    float PrintValue(in vec2 fragCoord, const in vec2 vPixelCoords, const in vec2 vFontSize, const in float fValue, const in float fMaxDigits, const in float fDecimalPlaces){
                        return PrintValue((fragCoord.xy - vPixelCoords) / vFontSize, fValue, fMaxDigits, fDecimalPlaces);
                    }
    grid:
        mix: space-tile
        shaders:
            blocks:
                global: |
                    //  Simple Grid
                    //=============================
                    float grid(in vec2 st, in float res, in float press){
                        st = fract(st*res);
                        return 1.0-(step(press*res,st.x) * step(press*res,st.y));
                    }
                    float grid(in vec2 st, in float res){
                        return grid(st,res,0.005);
                    }
                    // GridTile
                    //=============================
                    vec3 TileGrid(float res){
                        vec2 st = getTileCoords().xy *100.*res;
                        vec3 color = vec3(0.0);
                        float press = 0.5;//0.5+(1.0-fract(u_map_position.z))*0.1;
                        color += 0.1*grid(st,0.1,press);
                        color += 0.2*grid(st,0.01,press);
                        return color;
                    }
                    vec3 TileGrid(){ return mix(TileGrid(1.),TileGrid(2.),fract(u_map_position.z)); }
# ----------------------- 
    water:
        base: polygons
        mix: [grid]
        animated: false
        shaders:
            blocks:
                color: |
                    color.rgb -= TileGrid()*0.4; 
    area:
        base: polygons
        mix: [geometry-matrices, functions-map, functions-aastep, space-tile]
        blend: inlay
        shaders: 
            blocks: 
                global: |
                    float stripes(vec2 st, float width){
                        st = rotate2D(0.78539816339)*st;
                        st *= 29.7;
                        return aastep(.5+width*0.5,abs(sin(st.y*3.14159265358)));
                    }
                filter: |
                    vec2 st = getTileCoords()*2.;
                    float pct = pow(1.-map(u_map_position.z,6.,20.,0.,1.),5.0);
                    color.a = stripes(st,pct*1.608)*.5;
    wind:
        base: points
        texcoords: true
        animated: true
        mix: [functions-aastep, geometry-matrices, shapes-cross, shapes-digits]
        shaders:
            uniforms:
                u_data: data_image
                u_param: [596, 1613]
                u_offset: 0
            blocks: 
                global: |
                    float getIndex (vec2 encodedIndex) {
                        return (encodedIndex.x*65025.+encodedIndex.y*255.)+.5;
                    }
                    
                    float shape(vec2 st, int N){
                        st = st *2.-1.;
                        float a = atan(st.x,st.y)+PI;
                        float r = TWO_PI/float(N);
                        return cos(floor(.5+a/r)*r-a)*length(st);
                    }

                    vec4 getColor (vec2 st) {
                        float texWidth = u_param.x;
                        float texHeigth = u_param.y;
                        st.y = 1.-st.y/texHeigth;
                        return texture2D(u_data,vec2(st.x/texWidth,st.y));
                    }

                color: |
                    float index = getIndex(color.st);
                    float t = u_offset;
                    // t = u_time;
                    
                    color = vec4(0.);
                    float i_now = floor(t);
                    float f_now = fract(t);
                    float next = i_now+1.;

                    vec4 data_now = getColor(vec2(mod(i_now,u_resolution.x),index));
                    vec4 data_next = getColor(vec2(mod(next,u_resolution.x),index));
                    vec4 data_interpol = mix(data_now,data_next,f_now);

                    float dir_now = data_now.b;
                    float dir_next = (data_next.g == 0.)? data_now.b : data_next.b;
                    float dir_delta = fract(dir_next-dir_now);
                    if (dir_delta > .5) {
                        dir_delta -= 1.;
                    }
                    dir_next = dir_now + dir_delta;

                    float w_deg = mix(dir_now, dir_next, f_now)*-TWO_PI;
                    float w_speed = data_interpol.g;
                    float temp = data_interpol.r;
                    
                    vec2 st = v_texcoord.xy;
                    float hud = 0.;
                    
                    // float valid = smoothstep(0.5,1.,data_interpol.a);
                    
                    if (v_color.b != 0.) {
                        hud += max(rect(st,2.)-rect(st,1.6)-cross(st,5.,5.),0.);
                    }
                        
                    // if (valid > .9) { 
                        st -= .5;
                        st = rotate2D(w_deg) * st;
                        // st *= 1.4;
                        st += .5;

                        // Arrow
                        float scale = .5;//(1.-w_speed)*1.3;
                        float d = shape(st * vec2(scale+.5,.5) + vec2(scale*-.5+.25,.3),3) / shape(st * vec2(scale+.5,.5) + vec2(scale*-.5+.25,1.132),3);
                        color.rgb = mix(vec3(0.029,0.321,0.440),vec3(1.000,0.000,0.060), w_speed);
                        color.rgb = mix(color.rgb, vec3(1.), step(0.2,d));
                        color.a = 1.0-step(.25,d);//*valid;
                        // color.a *= .2+w_speed;
                    // } else {
                    //     st -= .5;
                    //     st *= 1.4;
                    //     st += .5;
                    //     color = vec4(vec3(0.956,0.970,0.960),1.0)*cross(st, 0.464, 0.104);
                    // }
                    
                    color.rgb -= hud;
                    color.a += hud;
    elevation:
        base: polygons
        mix: [color-tools, functions-map]
        raster: custom
        shaders: 
            blocks:
                color: |
                    float z = 1.-map(u_map_position.z,7.,14.,0.,1.);
                    float b = sampleRaster(0).b+clamp(z*z,0.,0.524);
                    if (b != 0.0) {
                        color.rgb = mix(vec3(0.039,0.004,0.016), vec3(0.176,0.243,0.286), smoothstep(0.1,0.9,b));
                        color.rgb = mix(color.rgb, vec3(0.933,0.937,0.949), smoothstep(0.708,1.,b));
                    }